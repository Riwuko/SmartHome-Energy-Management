from abc import ABC
from datetime import datetime
from django.forms.models import model_to_dict
from typing import Dict
from .models import Device, DeviceRaport
from .documents import DeviceRaportDocument
from elasticsearch_dsl import Search
from elasticsearch import Elasticsearch

client = Elasticsearch()

class DeviceCalculateManager():
    """Manager class for choosing strategy for calculating device energy data"""

    def get_device_energy(self, device: Device, start_date: datetime=None) -> dict:
        device_type = {
            "EnergyReceiver": EnergyReceiverCalculator,
            "EnergyGenerator": EnergyGeneratorCalculator,
            "EnergyStorage": EnergyStorageCalculator,
        }.get(device.type)
        try:
            return device_type().get_device_energy_calculation(device, start_date)
        except AttributeError:
            return {}

class EnergyCalculator(ABC):
    """Abstract class that provides interface with methods for concrete energy calculators"""

    def get_device_energy_calculation(self, device: Device, start_date: datetime=None) -> dict:
        device_raports = self._filter_raports_by_device_and_date(device, start_date)
        return {
            **model_to_dict(device),
            **self._calculate_energy_data(device, device_raports),
        }

    def _filter_raports_by_device_and_date(start, device: Device, start_date: datetime=None) -> Search:
        raports = DeviceRaportDocument.search().query('match', device__id=device.id)
        if start_date:
            raports = raports.filter("range", turned_on={"gte": start_date})
        return raports

class EnergyReceiverCalculator(EnergyCalculator):
    """Energy calculating class for energy receiving devices"""

    def _calculate_energy_data(self, device: Device, device_raports: Search) -> Dict[str, float]:
        """Calculate energy consumptioned by the device in a given time.

        Arguments:
        device -- instance of a device for calculating energy consumption for
        device_raports -- device power raports filtered by elasticsearch 
        """
        for raport in device_raports:
            print(raport.device, raport.turned_on, device.energy_consumption)

        energy_consumed = "not_calculated_yet"
        return {"energy_consumed": energy_consumed}

class EnergyGeneratorCalculator(EnergyCalculator):
    """Energy calculating class for energy generating devices"""

    def _calculate_energy_data(self, device: Device, device_raports: Search) -> Dict[str, float]:
        """Calculate energy generated by the device in a given time.

        Arguments:
        device -- instance of a device for calculating energy generation for
        device_raports -- device power raports filtered by elasticsearch 
        """
        for raport in device_raports:
            print(raport.device, raport.turned_on, device.energy_consumption)

        energy_generated = "not_calculated_yet"
        return {"energy_generated": energy_generated}

class EnergyStorageCalculator(EnergyCalculator):
    """Energy calculating class for energy storing devices"""

    def _calculate_energy_data(self, device: Device, device_raports: Search) -> Dict[str, float]:
        """Calculate energy stored by the device in a given time.

        Arguments:
        device -- instance of a device for calculating energy storage for
        device_raports -- device power raports filtered by elasticsearch 
        """
        for raport in device_raports:
            print(raport.device, raport.turned_on, device.energy_consumption)

        energy_stored = "not_calculated_yet"
        return {"energy_stored": energy_stored}
